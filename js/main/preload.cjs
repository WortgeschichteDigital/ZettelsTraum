
const validInvokes = [
  "app-beenden",
  "bedeutungen-fokussieren",
  "bedeutungen-oeffnen",
  "bedeutungen-schliessen",
  "bilder-senden",
  "cb",
  "cli-message",
  "cli-return-code",
  "datei-dialog",
  "dir-read",
  "downloads-cache-get",
  "downloads-cache-save",
  "exec-paste",
  "fehler",
  "fehler-senden",
  "fenster-fokus",
  "fenster-hauptfenster",
  "fenster-oeffnen",
  "fenster-schliessen",
  "fenster-schliessen-endgueltig",
  "fenster-status",
  "file-copy",
  "file-exists",
  "file-info",
  "file-read",
  "file-unlink",
  "file-write",
  "get-file-list",
  "get-info",
  "get-xml-file-list",
  "hilfe-changelog",
  "hilfe-demo",
  "hilfe-dokumentation",
  "hilfe-fehlerlog",
  "hilfe-handbuch",
  "init-done",
  "io",
  "kartei-geoeffnet",
  "kartei-geschlossen",
  "kartei-laden",
  "kartei-schon-offen",
  "kopieren-basisdaten",
  "kopieren-basisdaten-lieferung",
  "kopieren-daten",
  "kopieren-daten-lieferung",
  "menus-deaktivieren",
  "neues-wort",
  "open-external",
  "open-folder",
  "open-path",
  "optionen-speichern",
  "optionen-tag-dateien-abgleich",
  "optionen-zuletzt-wiedergefunden",
  "path-dirname",
  "path-info",
  "path-join",
  "path-normalize",
  "path-readable",
  "popup",
  "quick-roles",
  "red-xml-fokussieren",
  "red-xml-oeffnen",
  "red-xml-schliessen",
  "ueber-app",
  "ueber-electron",
  "updates-get-data",
  "updates-save-data",
  "webcontents-bridge",
  "win32-hide-file",
  "ztj-cache-get",
  "ztj-cache-save",
  "ztj-cache-status-get",
  "ztj-cache-status-set",
];

const validListeners = [
  "app-einstellungen",
  "app-karteisuche",
  "bedeutungen-fenster-daten",
  "bedeutungen-fenster-drucken",
  "bedeutungen-fenster-geschlossen",
  "bedeutungen-fenster-umtragen",
  "before-unload",
  "belege-auflisten",
  "belege-buchung",
  "belege-einfuegen",
  "belege-hinzufuegen",
  "belege-kopieren",
  "belege-loeschen",
  "belege-taggen",
  "belege-zwischenablage",
  "cli-command",
  "daten",
  "dialog-anzeigen",
  "helle-dunkler",
  "hilfe-demo",
  "hilfe-updates",
  "kartei-anhaenge",
  "kartei-bedeutungen",
  "kartei-bedeutungen-fenster",
  "kartei-bedeutungen-wechseln",
  "kartei-erstellen",
  "kartei-formvarianten",
  "kartei-lemmata",
  "kartei-lexika",
  "kartei-metadaten",
  "kartei-notizen",
  "kartei-oeffnen",
  "kartei-schliessen",
  "kartei-speichern",
  "kartei-speichern-unter",
  "kartei-suche",
  "kopieren-basisdaten",
  "kopieren-basisdaten-empfangen",
  "kopieren-daten",
  "kopieren-daten-empfangen",
  "oeffne-abschnitt",
  "optionen-empfangen",
  "optionen-fenster",
  "optionen-init",
  "optionen-letzter-pfad",
  "optionen-zuletzt",
  "optionen-zuletzt-verschwunden",
  "popup-anhaenge-auto-ergaenzen",
  "popup-anhaenge-fenster",
  "popup-anhaenge-oeffnen",
  "popup-beleg-bearbeiten",
  "popup-beleg-duplizieren",
  "popup-beleg-hinzufuegen",
  "popup-beleg-klammern-make",
  "popup-beleg-klammern-remove",
  "popup-beleg-loeschen",
  "popup-beleg-zwischenablage",
  "popup-belege-auflisten",
  "popup-erinnerungen",
  "popup-filter-reset",
  "popup-kartei-entfernen",
  "popup-kartei-erstellen",
  "popup-kartei-oeffnen",
  "popup-kopieren",
  "popup-kopieren-code",
  "popup-kopieren-id",
  "popup-kopieren-nebenfenster",
  "popup-kopierfunktion",
  "popup-lexika",
  "popup-link",
  "popup-mail",
  "popup-markieren",
  "popup-notizen",
  "popup-optionen-oeffnen",
  "popup-ordner",
  "popup-ordner-kartei",
  "popup-redaktion",
  "popup-schliessen",
  "popup-text-complete",
  "popup-text-referenz",
  "popup-titel-aufnahmen",
  "popup-titel-bearbeiten",
  "popup-titel-loeschen",
  "popup-titel-xml",
  "popup-titel-zwischenablage",
  "popup-wort",
  "popup-xml-referenz",
  "popup-xml-schnitt-cb",
  "popup-xml-schnitt-win",
  "red-xml-daten",
  "red-xml-geschlossen",
  "red-xml-speichern",
  "redaktion-belege-xml",
  "redaktion-ereignisse",
  "redaktion-literatur",
  "redaktion-metadaten",
  "redaktion-wortinformationen",
  "redaktion-xml",
  "updates-check",
  "xml-daten",
  "xml-datensatz",
];

const {
  contextBridge,
  ipcRenderer,
  webUtils,
} = require("electron");

contextBridge.exposeInMainWorld("bridge", {
  // inter-process communication
  ipc: {
    async invoke (command, ...args) {
      if (!validInvokes.includes(command)) {
        return null;
      }
      return await ipcRenderer.invoke(command, ...args);
    },

    listen (command, callback) {
      if (!validListeners.includes(command)) {
        return;
      }
      ipcRenderer.on(command, (evt, ...args) => callback(...args));
    },
  },

  // web utilities
  web: {
    getPathForFile: path => webUtils.getPathForFile(path),
  },
});
